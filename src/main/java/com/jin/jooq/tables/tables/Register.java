/*
 * This file is generated by jOOQ.
*/
package com.jin.jooq.tables.tables;


import com.jin.jooq.tables.Cyui;
import com.jin.jooq.tables.Indexes;
import com.jin.jooq.tables.Keys;
import com.jin.jooq.tables.tables.records.RegisterRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Register extends TableImpl<RegisterRecord> {

    private static final long serialVersionUID = 1346182850;

    /**
     * The reference instance of <code>cyui.register</code>
     */
    public static final Register REGISTER = new Register();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RegisterRecord> getRecordType() {
        return RegisterRecord.class;
    }

    /**
     * The column <code>cyui.register.registerNo</code>. 主键，唯一标识
     */
    public final TableField<RegisterRecord, Integer> REGISTERNO = createField("registerNo", SQLDataType.INTEGER.nullable(false).identity(true), this, "主键，唯一标识");

    /**
     * The column <code>cyui.register.registerName</code>. 名称，必填
     */
    public final TableField<RegisterRecord, String> REGISTERNAME = createField("registerName", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "名称，必填");

    /**
     * The column <code>cyui.register.role</code>. 角色，0-超级管理员，1-管理员，2-普通用户
     */
    public final TableField<RegisterRecord, Integer> ROLE = createField("role", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "角色，0-超级管理员，1-管理员，2-普通用户");

    /**
     * The column <code>cyui.register.age</code>. 年龄
     */
    public final TableField<RegisterRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "年龄");

    /**
     * The column <code>cyui.register.address</code>. 地址
     */
    public final TableField<RegisterRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR(50), this, "地址");

    /**
     * The column <code>cyui.register.status</code>. 状态，0-开启，1-关闭
     */
    public final TableField<RegisterRecord, Integer> STATUS = createField("status", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "状态，0-开启，1-关闭");

    /**
     * Create a <code>cyui.register</code> table reference
     */
    public Register() {
        this(DSL.name("register"), null);
    }

    /**
     * Create an aliased <code>cyui.register</code> table reference
     */
    public Register(String alias) {
        this(DSL.name(alias), REGISTER);
    }

    /**
     * Create an aliased <code>cyui.register</code> table reference
     */
    public Register(Name alias) {
        this(alias, REGISTER);
    }

    private Register(Name alias, Table<RegisterRecord> aliased) {
        this(alias, aliased, null);
    }

    private Register(Name alias, Table<RegisterRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cyui.CYUI;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REGISTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RegisterRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REGISTER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RegisterRecord> getPrimaryKey() {
        return Keys.KEY_REGISTER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RegisterRecord>> getKeys() {
        return Arrays.<UniqueKey<RegisterRecord>>asList(Keys.KEY_REGISTER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Register as(String alias) {
        return new Register(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Register as(Name alias) {
        return new Register(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Register rename(String name) {
        return new Register(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Register rename(Name name) {
        return new Register(name, null);
    }
}
